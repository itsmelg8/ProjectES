// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @default(cuid()) @id
  user               User    @relation(fields: [userId], references:[id], onDelete: Cascade)
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  @@unique([provider, providerAccountId])
  }

model Session {
  id           String   @default(cuid()) @id 
  sessionToken String   @unique@map("session_token")
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId       String   @map("user_id")
  expires      DateTime
  }

model User {
  id            String      @default(cuid()) @id
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  post          Post[]
  veiculos      Veiculo[] 
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

model VerificationToken {
  id         Int      @default(autoincrement()) @id 
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  }


model Veiculo {
    id          String      @default(cuid()) @id
    placa       String          
    marca       String   
    modelo      String   
    cor         String       
    dono        User        @relation(fields: [donoId], references: [id])
    donoId      String
    estacionou  Estacionou[]
}

model Estacionamento {
    id          String       @default(cuid()) @id
    nome        String          
    endereco    String
    cor         String   
    taxa        Decimal
    estacionou  Estacionou[]
}

model Estacionou {
    id                  String          @default(cuid()) @id
    veiculo             Veiculo         @relation(fields: [veiculoId], references: [id])
    veiculoId           String      
    estacionamento      Estacionamento  @relation(fields: [estacionamentoId], references: [id])
    estacionamentoId    String
    entrada             DateTime        @default(now())
    saida               DateTime?
}

